{"_id":"5QMyL9TRKHzKScdS","name":"Invisibility","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet target = canvas.tokens.get(args[1])\r\nif(args[0] === \"on\"){\r\nTokenUpdate.execute(args[1],{\"hidden\": true});\r\nChatMessage.create({content: target.name + \" is invisible\"})\r\n} else {\r\n    TokenUpdate.execute(args[1],{\"hidden\": false});\r\n    ChatMessage.create({content: target.name + \" is no longer invisible\"})\r\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"BlindDeaf","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.oiEgd0VHxlxJZsWN"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Choose an Effect\",\n        buttons: {\n            one: {\n                label: \"Blindness\",\n                callback: () => {\n                    game.macros.getName(\"BlindExecute\").execute(\"Blinded\", args[1], 1 )\n                }\n            },\n            two: {\n                label: \"Deafness\",\n                callback: () => {\n                    game.macros.getName(\"BlindExecute\").execute(\"Deafened\", args[1], 1 )\n                }\n            }\n        },\n    }).render(true);\n}\nif(args[0] === \"off\"){\n    if (target.actor.getFlag('world', 'DE Blinded')) {\n        game.macros.getName(\"BlindExecute\").execute(\"Blinded\", args[1], 2 )\n    } else if (target.actor.getFlag('world', 'DE Deafened')) {\n        game.macros.getName(\"BlindExecute\").execute(\"Deafened\", args[1], 2 )\n    }\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"9cZIxmBVwbFpE9cP"}
{"name":"Eyebite","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.yrTB6zHbr4HwYGnS"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\nlet ConditionControl = game.macros.getName(\"CUB Condition\")\n// get the hookId here\nlet hookIdFlag = ActorGetFlag.execute(args[1], \"world\", \"EyebiteSpell\");\nconsole.log(hookIdFlag)\n\nif (args[0] === \"on\") {\n    const hookId = Hooks.on(\"updateCombat\", (combat, update) => {\n        if (!(\"round\" in update || \"turn\" in update)) return;\n        if (combat.combatant.tokenId === args[1]) {\n            new Dialog({\n                title: \"Eyebite options\",\n                content: \"<p>Target a token and select the effect</p>\",\n                buttons: {\n                    one: {\n                        label: \"Asleep\",\n                        callback: () => {\n                            for (let target of game.user.targets) {\n                                let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                                save_roll.toMessage({\n                                    speaker: ChatMessage.getSpeaker({ token: target }),\n                                    rollMode: \"blindroll\"\n                                });\n                                if (save_roll.total < args[2]) {\n                                    ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                                    ConditionControl.execute(\"apply\", \"Unconscious\", target)\n                                } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                            }\n                        }\n                    },\n                    two: {\n                        label: \"Panicked\",\n                        callback: () => {\n                            for (let target of game.user.targets) {\n                                let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                                save_roll.toMessage({\n                                    speaker: ChatMessage.getSpeaker({ token: target }),\n                                    rollMode: \"blindroll\"\n                                });\n                                if (save_roll.total < args[2]) {\n                                    ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                                    ConditionControl.execute(\"apply\", \"Frightened\", target)\n                                } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n\n                            }\n                        }\n                    },\n                    three: {\n                        label: \"Sickened\",\n                        callback: () => {\n                            for (let target of game.user.targets) {\n                                let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                                save_roll.toMessage({\n                                    speaker: ChatMessage.getSpeaker({ token: target }),\n                                    rollMode: \"blindroll\"\n                                });\n                                if (save_roll.total < args[2]) {\n                                    ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                                    ConditionControl.execute(\"apply\", \"Poisoned\", target)\n                                } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                            }\n                        }\n                    },\n                }\n            }).render(true);\n\n        }\n    });\n    ActorSetFlag.execute(args[1], \"world\", \"EyebiteSpell\", hookId);\n    ChatMessage.create({ content: target.name + \" is blessed with Eyebite\" });\n    new Dialog({\n        title: \"Eyebite options\",\n        content: \"<p>Target a token and select the effect</p>\",\n        buttons: {\n            one: {\n                label: \"Asleep\",\n                callback: () => {\n                    for (let target of game.user.targets) {\n                        let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                        save_roll.toMessage({\n                            speaker: ChatMessage.getSpeaker({ token: target }),\n                            rollMode: \"blindroll\"\n                        });\n                        if (save_roll.total < args[2]) {\n                            ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                            ConditionControl.execute(\"apply\", \"Unconscious\", target)\n                        } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                    }\n                }\n            },\n            two: {\n                label: \"Panicked\",\n                callback: () => {\n                    for (let target of game.user.targets) {\n                        let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                        save_roll.toMessage({\n                            speaker: ChatMessage.getSpeaker({ token: target }),\n                            rollMode: \"blindroll\"\n                        });\n                        if (save_roll.total < args[2]) {\n                            ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                            ConditionControl.execute(\"apply\", \"Frightened\", target)\n                        } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n\n                    }\n                },\n            },\n            three: {\n                label: \"Sickened\",\n                callback: () => {\n                    for (let target of game.user.targets) {\n                        let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                        save_roll.toMessage({\n                            speaker: ChatMessage.getSpeaker({ token: target }),\n                            rollMode: \"blindroll\"\n                        });\n                        if (save_roll.total < args[2]) {\n                            ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                            ConditionControl.execute(\"apply\", \"Poisoned\", target)\n                        } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                    }\n                }\n            },\n        }\n    }).render(true)\n\n} else if (args[0] === \"off\") {\n    async function off() {\n        ChatMessage.create({ content: \"Eyebite is removed\" });\n        let hookIdFlag = await ActorGetFlag.execute(args[1], \"world\", \"EyebiteSpell\");\n        console.log(\"testing.......\" + hookIdFlag)\n        debugger\n        Hooks.off(\"updateCombat\", hookIdFlag);\n    }\n    off()\n    ActorUnSetFlag.execute(args[1], \"world\", \"EyebiteSpell\");\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"EDVrkYKhRMIyDSmp"}
{"_id":"IbpEUtL9u8v8SK8r","name":"Enhance Ability","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const targetArray = [args[1]]\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\r\n\r\n\r\nif (args[0] === \"on\") {\r\n    targetArray.forEach((element) => {\r\n        let target = canvas.tokens.get(args[1]);\r\n        if (target && !target.getFlag('world', 'enhanceAbility')) {\r\n            new Dialog({\r\n                title: \"Choose enhance ability effect for \" + target.name,\r\n                buttons: {\r\n                    one: {\r\n                        label: \"Bear's Endurance\",\r\n                        callback: () => {\r\n                            let formula = `2d6`;\r\n                            let amount = new Roll(formula).roll().total;\r\n                            ActorSetFlag.execute(args[1], 'world', 'enhanceAbility', {\r\n                                name: \"bear\",\r\n                            });\r\n                            ChatMessage.create({ content: target.name + \" gains \" + amount + \" temp Hp\" })\r\n                            ActorUpdate.execute(args[1], { \"data.attributes.hp.temp\": amount });\r\n\r\n                        }\r\n                    },\r\n                    two: {\r\n                        label: \"Bull's Strength\",\r\n                        callback: () => {\r\n                            ChatMessage.create({ content: target.name + \"s encumberance is doubled\" })\r\n                            ActorSetFlag.execute(args[1], 'world', 'enhanceAbility', {\r\n                                name: \"bull\"\r\n                            });\r\n                            ActorSetFlag.execute(args[1], 'dnd5e', 'powerfulBuild', true)\r\n                        }\r\n                    },\r\n                    three: {\r\n                        label: \"Other\",\r\n                        callback: () => {\r\n                            ActorSetFlag.execute(args[1], 'world', 'enhanceAbility', {\r\n                                name: \"other\",\r\n                            });\r\n                            ChatMessage.create({ content: \"A non automated Ability was enhanced for \" + target.name })\r\n                        }\r\n                    }\r\n                }\r\n            }).render(true);\r\n        }\r\n    })\r\n}\r\nif (args[0] === \"off\") {\r\n    targetArray.forEach((element) => {\r\n        let target = canvas.tokens.get(args[1]);\r\n        let flag = target.actor.getFlag('world', 'enhanceAbility');\r\n        if (flag.name === \"bull\") ActorUnSetFlag.execute(args[1], 'dnd5e', 'powerfulBuild', false)\r\n        ActorUnSetFlag.execute(args[1], 'world', 'enhanceAbility')\r\n        ChatMessage.create({ content: \"Enhance Ability has expired\" })\r\n    }\r\n    )\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"HeroesFeast","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.OFmbN8LvQCsDvrrT"}},"scope":"global","command":"const targetArray = [args[1]]\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\nlet formula = \"2d10\";\nlet amount = new Roll(formula).roll().total;\n\nif (args[0] === \"on\") {\n    targetArray.forEach((element) => {\n        let target = canvas.tokens.get(args[1]);\n        let hpMax = target.actor.data.data.attributes.hp.max\n        let hp = target.actor.data.data.attributes.hp.value\n        ActorUpdate.execute(args[1], { \"data.attributes.hp.max\": (hpMax + amount), \"data.attributes.hp.value\": (hp + amount) });\n        ChatMessage.create({content: target.name + \" gains \" + amount + \" Max HP\"})\n        ActorSetFlag.execute(args[1], 'world', 'HeroesFeast', amount)\n    })\n};\n\nif (args[0] === \"off\") {\n\n    targetArray.forEach(async (element) => {\n      let target = canvas.tokens.get(args[1]);\n      let amount = await ActorGetFlag.execute(args[1], 'world', 'HeroesFeast');\n      let hpMax = target.actor.data.data.attributes.hp.max\n      ActorUpdate.execute(args[1], { \"data.attributes.hp.max\": (hpMax - amount) });\n      ChatMessage.create({ content: target.name + \"'s Max HP returns to normal\" })\n      ActorUnSetFlag.execute(args[1], 'world', 'HeroesFeast')\n  })\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"KihkgBmWk6cE6CN4"}
{"name":"BlindExecute","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.pbwtxuz3PnYmu8sB"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\n\nif (args[2] === 1){\n    game.cub.addCondition(args[0], target)\n    let flag = \"DE \" + args[0]\n    ActorSetFlag.execute(args[1], 'world', flag, 1)\n    ChatMessage.create({content: target.name + \" has been \" + args[0]})\n} if(args[2] === 2){\n        let flag = \"DE \" + args[0]\n        game.cub.removeCondition(args[0], target);\n        ChatMessage.create({content: target.name + \" is no longer \" + args[0]})\n        ActorUnSetFlag.execute(args[1], 'world', flag)\n    }","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"NX3K1iFlG3dHEwsA"}
{"name":"Levitate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet target = canvas.tokens.get(args[1]);\r\nif (args[0] === \"on\") {\r\n    ChatMessage.create({ content: target.name + \" is levitated 20ft\" })\r\n    TokenUpdate.execute(args[1], { \"elevation\": 20 });\r\n} else {\r\n    TokenUpdate.execute(args[1], { \"elevation\": 0 });\r\n    ChatMessage.create({ content: target.name + \" is returned to the ground\" })\r\n    if (game.modules.get(\"condition-automation\")?.active) {\r\n        ChatMessage.create({content: \"test\"})\r\n        TokenMagic.deleteFiltersOnSelected(\"autoShadow\");\r\n        TokenMagic.deleteFiltersOnSelected(\"autoTwist\");\r\n        TokenMagic.deleteFiltersOnSelected(\"autoBulge\");\r\n    }\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UDZROf1vwxy56tdD"}
{"name":"CUB Condition","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.WdwVdMQmK7EhPkKV"}},"scope":"global","command":"let target = args[2];\nif(args[0] === \"apply\"){\n    game.cub.addCondition(args[1], target)\n}\nif(args[0] === \"remove\") {\n    game.cub.removeCondition(args[1], target )\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UG5CmXsWaZKqFkLK"}
{"name":"Shillelagh","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet weapons = target.actor.items.filter(i => i.data.type === `weapon`);\r\nlet weapon_content = ``;\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\n\r\n\r\nfor (let weapon of weapons) {\r\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\r\n}\r\nif (args[0] === \"on\" && !target.getFlag('world', 'shillelagh')) {\r\n    let content = `\r\n<div class=\"form-group\">\r\n  <label>Weapons : </label>\r\n  <select name=\"weapons\">\r\n    ${weapon_content}\r\n  </select>\r\n</div>`;\r\n\r\n    new Dialog({\r\n        title: \"Choose a club or quarterstaff\",\r\n        content,\r\n        buttons:\r\n        {\r\n            Ok:\r\n            {\r\n                label: `Ok`,\r\n                callback: (html) => {\r\n                    console.log(html.find('[name=weapons]')[0].value);\r\n                    let itemId = html.find('[name=weapons]')[0].value;\r\n                    let item = token.actor.items.get(itemId);\r\n                    console.log(item)\r\n                    let copy_item = duplicate(item);\r\n                    ActorSetFlag.execute(args[1], `world`, `shillelagh`, {\r\n                        id : itemId,\r\n                        damage : copy_item.data.damage.parts[0][0]    \r\n                    });\r\n                    let damage = copy_item.data.damage.parts[0][0]\r\n                    console.log(typeof damage)\r\n                    var newdamage = damage.replace(/1d(4|6)/g,\"1d8\");\r\n                    console.log(newdamage)\r\n                    copy_item.data.damage.parts[0][0] = newdamage;\r\n                    copy_item.data.ability = \"wis\"\r\n                    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n                    ChatMessage.create({content: copy_item.name + \" is empowered\"})\r\n                }\r\n            },\r\n            Cancel:\r\n            {\r\n                label: `Cancel`\r\n            }\r\n        }\r\n    }).render(true);\r\n}\r\n\r\nif (args[0] === \"off\") {\r\n    let flag = target.actor.getFlag(`world`, `shillelagh`);\r\n    let itemId = flag.id;\r\n    let damage = flag.damage;\r\n    let item = token.actor.items.get(itemId);\r\n    let copy_item = duplicate(item);\r\n    copy_item.data.damage.parts[0][0] = damage;\r\n    copy_item.data.ability = \"\"\r\n    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n    ActorUnSetFlag.execute(args[1], `world`, `shillelagh`);\r\n    ChatMessage.create({content: copy_item.name + \" returns to normal\"})\r\n\r\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"X8vR4dksBLG77Mzr"}
{"_id":"XJ9laAhxSQd6KOUF","name":"DAE toggle item effect on/off","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.CBITwEj3TjVbXLUv"}},"scope":"global","command":"//type the name of the EFFECT present on an actor to toggle it\nlet dae_effect = async function() {\nconst effect_name = \"New Active Effect\";\nconst effect = token.actor.effects.entries;\nfor (let i = 0; i < effect.length; i++){\n     let condition = effect[i].data.label;\n     let status = effect[i].data.disabled;\n     let effect_id = effect[i].data._id;\n     if ((condition === effect_name) && (status === false)) {\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n     }\n     if ((condition === effect_name) && (status === true)){\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n    }\n}\n}\ndae_effect();","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"f9iF0LcMNJE134XO","name":"Magic Weapon","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet targetActor = target.actor;\r\nlet weapons = targetActor.items.filter(i => i.data.type === `weapon`);\r\nlet weapon_content = ``;\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\r\n\r\nfor (let weapon of weapons) {\r\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\r\n}\r\nif (args[0] === \"on\") {\r\n    let content = `\r\n<div class=\"form-group\">\r\n  <label>Weapons : </label>\r\n  <select name=\"weapons\">\r\n    ${weapon_content}\r\n  </select>\r\n</div>`;\r\n\r\n    new Dialog({\r\n        content,\r\n        buttons:\r\n        {\r\n            Ok:\r\n            {\r\n                label: `Ok`,\r\n                callback: (html) => {\r\n                    let itemId = html.find('[name=weapons]')[0].value;\r\n                    let item = targetActor.items.get(itemId);\r\n                    let copy_item = duplicate(item);\r\n                    console.log(copy_item)\r\n                    function value_limit(val, min, max) {\r\n                        return val < min ? min : (val > max ? max : val)\r\n                    };\r\n                    let spellLevel = Math.floor(args[2] / 2);\r\n                    let bonus = value_limit(spellLevel, 1, 3);\r\n                    let wpDamage = copy_item.data.damage.parts[0][0]\r\n                    ActorSetFlag.execute(args[1], `world`, `magicWeapon`, {\r\n                        damage :bonus,\r\n                        weapon : itemId,\r\n                        weaponDmg : wpDamage,\r\n                    });\r\n                    copy_item.data.attackBonus = (copy_item.data.attackBonus + bonus)\r\n                    copy_item.data.damage.parts[0][0] = (wpDamage + \" + \" + bonus)\r\n                    targetActor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n                }\r\n            },\r\n            Cancel:\r\n            {\r\n                label: `Cancel`\r\n            }\r\n        }\r\n    }).render(true);\r\n}\r\n\r\nif (args[0] === \"off\") {\r\n    let flag = target.actor.getFlag('world','magicWeapon')\r\n    let wpDamage = flag.weaponDmg\r\n    let itemId = flag.weapon\r\n    let item = target.actor.items.get(itemId);\r\n    console.log(item)\r\n    let bonus = flag.damage;\r\n    let copy_item = duplicate(item);\r\n    console.log(copy_item)\r\n    copy_item.data.attackBonus = (copy_item.data.attackBonus - bonus);\r\n    copy_item.data.damage.parts[0][0] = wpDamage\r\n    targetActor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n    ActorUnSetFlag.execute(args[1], `world`, `magicWeapon`);    \r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"ActorUpdate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = actor ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\n(async()=>{\r\n  await canvas.tokens.get(args[0]).actor.update(args[1]);\r\n})();","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"gZ22yWmRBsL6hHxi"}
{"_id":"h53SXiPj68gBkXsP","name":"Heroism","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let mod = args[2];\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\r\n\r\n// get the hookId here\r\nconst hookIdFlag = ActorGetFlag.execute(args[1], \"world\", \"heroismUpdateCombatHookId\");\r\nconsole.log(hookIdFlag)\r\n\r\nif (args[0] === \"on\") {\r\nChatMessage.create({content : \"Heroism is applied to targets\" })\r\n    const hookId = Hooks.on(\"updateCombat\", (combat, update) => {\r\n        if (!(\"round\" in update || \"turn\" in update)) return;\r\n        if (combat.combatant.tokenId === args[1]) {\r\n            let target = canvas.tokens.get(args[1]);\r\n            ActorUpdate.execute(args[1],{ \"data.attributes.hp.temp\": mod });\r\n            ChatMessage.create({ content: \"Heroism continues on \" + target.name  })\r\n        }\r\n    });\r\n    ActorSetFlag.execute(args[1], \"world\", \"heroismUpdateCombatHookId\", hookId);\r\n\r\n}\r\nif (args[0] === \"off\") {\r\nChatMessage.create({content : \"Heroism ends\"});\r\n    Hooks.off(\"updateCombat\", hookIdFlag);\r\n    ActorUnSetFlag.execute(args[1], \"world\", \"heroismUpdateCombatHookId\");\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"i6DSivgfgnmiQu2N","name":"DarkOnesBlessing","permission":{"default":0,"dv1o3vH3k0ku7ro4":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro                   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"if (args[0] === \"on\") {\nconsole.log(args)\n    let level = parseInt(args[2]);\n    let cha = parseInt(args[3]);\n    let total= level + cha;\n    //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\n    token.actor.update({\"data.attributes.hp.temp\": total}) \n    ChatMessage.create({content: actor.name + ` is replenished as the creature dies`});\n} if (args[0] === \"of\") {}","author":"dv1o3vH3k0ku7ro4","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"ActorGetFlag","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.SUOiDsbuMxlXuldC"}},"scope":"global","command":"return canvas.tokens.get(args[0]).actor.getFlag(args[1], args[2]);","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jQ2qw96yD5YXNpRC"}
{"_id":"lMAmkU13CpJ9KUUG","name":"Ring of Invisibility","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet hidden = target.data.hidden;\r\nlet visible = hidden ? false : true;\r\nTokenUpdate.execute(args[1],{\"hidden\": visible});\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"lefVX9mOaAfispDq","name":"ActorSetFlag","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).actor.setFlag(args[1], args[2], args[3]);\r\n\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Alter Self","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.KtmNCau8UBMjTv46"}},"scope":"global","command":"let item = actor.items.find(i => i.name === `Unarmed Strike`);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\nif (args[0] === \"on\") {\n    if (token) {\n        new Dialog({\n            title: \"Are you using Natural Weapons\",\n            content: \"<p>Yes or no</p>\",\n            buttons: {\n                one: {\n                    label: \"Yes\",\n                    callback: () => {\n                        if (!item){\n                            ChatMessage.create({content: \"No unarmed strike found\"})\n                            return;\n                        }\n                        let copy_item = duplicate(item);\n                        ActorSetFlag.execute(args[1],'world', 'AlterSelfSpell', copy_item.data.damage.parts[0][0])\n                        copy_item.data.damage.parts[0][0] = \"1d6 +@mod\"\n                        actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n                        ChatMessage.create({content: \"Unarmed strike is altered\"})\n                    }\n                },\n                    two: {\n                        label: \"No\",\n                        callback: () => ChatMessage.create({ content: `Unarmed strike not altered` })\n                },\n            }\n        }).render(true);\n    }\n} \nif(args[0] === \"off\") {\n    let damage = actor.getFlag('world', 'AlterSelfSpell')\ndebugger\n    let copy_item = duplicate(item);\n    copy_item.data.damage.parts[0][0] = damage\n    actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n    ActorUnSetFlag.execute(args[1],'world', 'AlterSelfSpell',);\n    ChatMessage.create({ content: `Alter Self expired, unarmed strike returned` })\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"m4bRzxmtjYrb5kXJ"}
{"name":"EnlargeReduce","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tKKbvoCkf5A37rsc"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet originalSize = target.data.width;\nlet mwak = target.actor.data.data.bonuses.mwak.damage\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nif (args[0] === \"on\" && !target.getFlag('world', 'enlageReduceSpell')) {\n    if (target) {\n        new Dialog({\n            title: \"Enlarge or Reduce\",\n            buttons: {\n                one: {\n                    label: \"Enlarge\",\n                    callback: () => {\n                        let bonus = mwak + \" 1d4\";\n                        let enlarge = (originalSize + 1);\n                        ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : bonus });\n                        TokenUpdate.execute(args[1],{\"width\": enlarge, \"height\": enlarge});\n                        ActorSetFlag.execute(args[1], 'world', 'enlageReduceSpell', {\n                            size: originalSize,\n                            ogMwak: mwak,\n                        })\n                        ChatMessage.create({content: target.name + \" is enlarged\"})\n                    }\n                },\n                    two: {\n                        label: \"Reduce\",\n                        callback: () => {\n                        let bonus = mwak +  \" -1d4\";\n                        let size = originalSize\n                        let newSize = (size > 1) ? (size -1) : (size - 0.3)\n                        ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : bonus });\n                        TokenUpdate.execute(args[1],{\"width\": newSize, \"height\": newSize});\n                        ActorSetFlag.execute(args[1], 'world', 'enlageReduceSpell', {\n                            size : originalSize,\n                            ogMwak : mwak,\n                        })\n                        ChatMessage.create({content: target.name + \" is reduced\"})\n                        }\n                },\n            }\n        }).render(true);\n    }\n} else if(args[0] === \"off\"){\n    let flag = target.actor.getFlag('world', 'enlageReduceSpell')\n    ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : flag.ogMwak })\n    TokenUpdate.execute(args[1],{\"width\": flag.size, \"height\": flag.size});\n    ActorUnSetFlag.execute(args[1], 'world', 'enlageReduceSpell')\n    ChatMessage.create({content: target.name + \" is returned to normal size\"})\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"nRqR9H4HOXahU9RC"}
{"name":"FireShield","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.bvIHiiIZMdgXaAzn"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\n\nif (args[0] === \"on\") {\n    if (token) {   \n        new Dialog({\n            title: \"Warm or Cold Shield\",\n            buttons: {\n                one: {\n                    label: \"Warm\",\n                    callback: () => {\n                        let resistances = target.actor.data.data.traits.dr.value\n                        resistances.push(\"cold\")\n                        target.actor.update({ \"data.traits.dr.value\": resistances })\n                        ActorSetFlag.execute(args[1], 'world', 'FireShield', \"cold\")\n                        ChatMessage.create({ content: target.name + \" gains resistnace to cold\" })\n                    }\n                },\n                two: {\n                    label: \"Cold\",\n                    callback: () => {\n                        let resistances = target.actor.data.data.traits.dr.value\n                        resistances.push(\"fire\")\n                        target.actor.update({ \"data.traits.dr.value\": resistances })\n                        ActorSetFlag.execute(args[1], 'world', 'FireShield', \"fire\")\n                        ChatMessage.create({ content: target.name + \" gains resistnace to fire\" })\n                    }\n                },\n            }\n        }).render(true);\n\n    }\n}\nif (args[0] === \"off\") {\n    let element = ActorGetFlag.execute(args[1], 'world', 'FireShield')\n    let resistances = target.actor.data.data.traits.dr.value\n    const index = resistances.indexOf(element)\n    resistances.splice(index, 1)\n    target.actor.update({ \"data.traits.dr.value\": resistances })\n    ChatMessage.create({ content: \"Fire Shield expires on \" + target.name})\n\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"neKC6vCIHJscwDVN"}
{"name":"TokenUpdate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).update(args[1]);","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"o5hi8GyaO6DgcApN"}
{"_id":"rwrWL0D1Pcmh7FBI","name":"ProtectionFromEnergy","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"Main()\nasync function Main() {\n  let target = canvas.tokens.get(args[1]);\n  let ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\n  let ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\n  let ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\n  if (args[0] === \"on\") {\n    let d = new Dialog({\n      title: 'Choose a damage type',\n      content: `\n          <form class=\"flexcol\">\n            <div class=\"form-group\">\n              <select id=\"element\">\n                <option value=\"acid\">Acid</option>\n                <option value=\"cold\">Cold</option>\n                <option value=\"fire\">Fire</option>\n                <option value=\"lightning\">Lightning</option>\n                <option value=\"thunder\">Thunder</option>\n              </select>\n            </div>\n          </form>\n        `,\n      buttons: {\n        yes: {\n          icon: '<i class=\"fas fa-check\"></i>',\n          label: 'Yes',\n          callback: (html) => {\n            let element = html.find('#element').val();\n            let resistances = target.actor.data.data.traits.dr.value\n            resistances.push(element)\n            target.actor.update({ \"data.traits.dr.value\": resistances });\n            ActorSetFlag.execute(args[1], 'world', 'ProtectionFromEnergy', element)\n            ChatMessage.create({ content: target.name + \" gains resistance to \" + element })\n          }\n        },\n      },\n    }).render(true);\n  }\n  if (args[0] === \"off\") {\n    let element = await ActorGetFlag.execute(args[1], 'world', 'ProtectionFromEnergy');\n    let resistances = target.actor.data.data.traits.dr.value\n    const index = resistances.indexOf(element)\n    resistances.splice(index, 1)\n    await target.actor.update({ \"data.traits.dr.value\": resistances });\n    ActorUnSetFlag.execute(args[1], 'world', 'ProtectionFromEnergy')\n    ChatMessage.create({ content: target.name + \"loses resistance to \" + element })\n  }\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"vzDHS2zuvGJZ30sU","name":"Banishment","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\n\r\nif (args[0] === \"on\") {\r\n    target.update({hidden : true});\r\n    ActorSetFlag.execute(args[1], 'world','banishment', 1);\r\n    ChatMessage.create({content: target.name + \"  was banished\"})\r\n    \r\n}\r\nif(args[0]=== \"off\") {\r\n target.update({hidden : false})\r\n ActorUnSetFlag.execute(args[1], 'world', 'banishment');\r\n ChatMessage.create({content: target.name + \"  returned\"})\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Darkvision","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.dXHxJVd97IaSeqPV"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet dimVision = target.data.dimSight\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\n\n\nif (args[0] === \"on\") {\n    ActorSetFlag.execute(args[1], 'world', 'darkvisionSpell', dimVision)\n    TokenUpdate.execute(args[1],{ \"dimSight\" : 60 })\n    ChatMessage.create({content: target.name + \"'s vision has been improved\"})\n}\nif(args[0] === \"off\") {\n    let sight = target.actor.getFlag('world', 'darkvisionSpell');\n    TokenUpdate.execute(args[1],{ \"dimSight\" : sight });\n    ActorUnSetFlag.execute(args[1], 'world', 'darkvisionSpell')\n    ChatMessage.create({content: target.name + \"'s vision has been reverted\"})\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"wXlTikf8eT3H8QlX"}
{"_id":"x8eiKNDtJtdOAYtf","name":"ActorUnSetFlag","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).actor.unsetFlag(args[1], args[2]);\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
