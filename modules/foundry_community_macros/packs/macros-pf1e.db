{"_id":"DqPNZUhidTtAtczn","name":"Channel Positive Healing","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\n// Leave casterName as null to channel positive as the currently-selected character\n// Example `const casterName = \"Bob Bobbington\";`\nconst casterName = null;\n\nconst tokens = canvas.tokens.controlled;\nlet caster = tokens.map((o) => o.actor)[0];\nif (!caster && !!casterName) {\n    caster = game.actors.entities.filter((o) => o.name.includes(casterName))[0];\n}\n\nfunction channelPositive() {\n  if (!caster.data.data.classes.cleric) {\n    ui.notifications.warn(\"You're not a cleric!\");\n    return;\n  }\n  const clericLevel = caster.data.data.classes.cleric.level;\n  const rollString = `${Math.floor((clericLevel + 1) / 2)}d6`;\n\n  const roll = new Roll(rollString);\n  roll.roll();\n  roll.toMessage({\n    flavor: \"Channeling positive energy\",\n  });\n}\n\nif (!caster || caster === undefined) {\n  ui.notifications.warn(\"You need to be controlling someone to channel!\")\n} else {\n  channelPositive();\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Roll Knowledge Skill Check","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"const tokens = canvas.tokens.controlled;\nconst caster = tokens[0];\n\nif (tokens.length !== 1) {\n  ui.notifications.warn(\"Please select a token\");\n} else {\n  const knowledgeTypes = [\n    \"Arcana\",\n    \"Dungeoneering\",\n    \"Engineering\",\n    \"Geography\",\n    \"History\",\n    \"Local\",\n    \"Nature\",\n    \"Nobility\",\n    \"Planes\",\n    \"Religion\",\n  ];\n\n  const knowledgeData = [];\n  knowledgeTypes.forEach((type) => {\n    const knowledgeDatum =\n      caster.actor.data.data.skills[`k${type.toLowerCase().substring(0, 2)}`];\n    knowledgeDatum.name = type;\n    knowledgeData.push(knowledgeDatum);\n  });\n\n  const knownKnowledge = knowledgeData.filter((datum) => datum.rank > 0);\n\n  if (knownKnowledge.length < 1) {\n    ui.notifications.warn(\"You know nothing.\");\n  } else {\n    const buttons = {};\n    knownKnowledge.forEach((type) => {\n      buttons[type.name] = {\n        label: type.name,\n        callback: () => {\n          rollCheck(type.name, type.mod);\n        },\n      };\n    });\n\n    new Dialog({\n      title: \"Roll Knowledge!\",\n      content: `<p>Choose a knowledge skill</p>`,\n      buttons: buttons,\n    }).render(true);\n  }\n}\n\nfunction rollCheck(name, mod) {\n  const roll = new Roll(`1d20 + ${mod}`);\n  roll.roll();\n  roll.toMessage({\n    flavor: `Knowledge ${name} check`,\n    speaker: { alias: token.actor.data.name },\n  });\n}\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"JSZ1MvLeM0nFLU8f"}
{"_id":"cGbvJGOYy8MFDSpJ","name":"Wand of Cure Light Wounds","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// this script attempts to heal X points of damage by repeatedly using charges of wands of cure light wounds\n\nfunction hitTarget(target) {\n  if (target > 250) {\n    ui.notifications.warn(\n      \"Too much healing! No one needs that much healing! Max 250.\"\n    );\n    return;\n  }\n  let current = 0;\n  let chargesUsed;\n\n  const rolls = [];\n  for (chargesUsed = 0; current < target; chargesUsed += 1) {\n    const roll = new Roll(\"1d8 + 1\");\n    roll.roll();\n    current += roll.total;\n    rolls.push({ roll: roll.total - 1 });\n  }\n\n  const roll = new Roll(`${chargesUsed}d8 + ${chargesUsed}`);\n  const msg = roll.toMessage(\n    { flavor: `Casting <i>cure light wounds</i> ${chargesUsed} times` },\n    { create: false }\n  );\n\n  const fakeRoll = {\n    class: \"Roll\",\n    formula: `${chargesUsed}d8 + ${chargesUsed}`,\n    dice: [\n      {\n        class: \"Die\",\n        faces: 8,\n        rolls: rolls,\n        formula: `${chargesUsed}d8`,\n        options: {},\n      },\n    ],\n    parts: [\"_d0\", \"+\", `${chargesUsed}`],\n    result: `${current - chargesUsed} + ${chargesUsed}`,\n    total: current,\n  };\n\n  msg.roll = JSON.stringify(fakeRoll);\n  msg.content = String(current);\n\n  const tokens = canvas.tokens.controlled;\n  if (tokens.length !== 1) {\n    ui.notifications.warn(\"Please select a token.\");\n    return;\n  }\n  const token = tokens[0];\n  msg.speaker = {alias: token.actor.data.name}\n\n  ChatMessage.create(msg);\n}\n\nnew Dialog({\n  title: \"Cast until heal a set amount\",\n  content:\n    \"<p>Enter the amount you want to heal</p><center><input type='number' id='amountInput'></center><br>\",\n  buttons: {\n    submit: {\n      label: \"Heal\",\n      icon: '<i class=\"fas fa-medkit\"></i>',\n      callback: () => {\n        const healTarget = parseInt(\n          eval(\n            $(\"#amountInput\")\n              .val()\n              .match(/[0-9]*/g)\n          )\n        );\n        hitTarget(healTarget);\n      },\n    },\n  },\n}).render(true);\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
